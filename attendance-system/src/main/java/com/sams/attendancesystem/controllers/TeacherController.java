package com.sams.attendancesystem.controllers;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
// import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
// import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

import com.sams.attendancesystem.Repository.TeacherRepository;
import com.sams.attendancesystem.models.Teacher;

@RestController // This means that this class is a Controller
@RequestMapping(path="/teacher",method = {RequestMethod.DELETE, RequestMethod.GET, RequestMethod.PUT}) // This means URL's start with /demo (after Application path)
public class TeacherController {
  @Autowired // This means to get the bean called teacherRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private TeacherRepository teacherRepository;

  @PostMapping(path="/add") // Map ONLY POST Requests
  public String addNewTeacher (@RequestParam Integer teacherId
      , @RequestParam String teacherName) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    Teacher n = new Teacher();
    n.setteacherId(teacherId);
    n.setteacherName(teacherName);
    teacherRepository.save(n);
    return "Saved";
  }

  // @GetMapping("/find/{teacherId}")
  // public Teacher find(@PathVariable Integer teacherId) {
    
  //   return teacherRepository.findById(teacherId);
  //     // .orElseThrow(() -> new TeacherNotFoundException(teacherId));
  // }

  // to Retrieve All Teachers
  @GetMapping(path="/all")
  public Iterable<Teacher> getAllUsers() {
    // This returns a JSON or XML with the users
    return teacherRepository.findAll();
  }


  // to delete any Teacher using its id
  @DeleteMapping(path = "/delete/{teacherId}")
  public String delete(@PathVariable Integer teacherId){
    teacherRepository.deleteById(teacherId);
    return "Delete by id";
  }
}

